'\" t
.TH "SD_JOURNAL_QUERY_UNIQUE" "3" "" "systemd 221" "sd_journal_query_unique"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_journal_query_unique, sd_journal_enumerate_unique, sd_journal_restart_unique, SD_JOURNAL_FOREACH_UNIQUE \- Read unique data fields from the journal
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-journal\&.h>
.fi
.ft
.HP \w'int\ sd_journal_query_unique('u
.BI "int sd_journal_query_unique(sd_journal\ *" "j" ", const\ char\ *" "field" ");"
.HP \w'int\ sd_journal_enumerate_unique('u
.BI "int sd_journal_enumerate_unique(sd_journal\ *" "j" ", const\ void\ **" "data" ", size_t\ *" "length" ");"
.HP \w'void\ sd_journal_restart_unique('u
.BI "void sd_journal_restart_unique(sd_journal\ *" "j" ");"
.HP \w'SD_JOURNAL_FOREACH_UNIQUE('u
.BI "SD_JOURNAL_FOREACH_UNIQUE(sd_journal\ *" "j" ", const\ void\ *" "data" ", size_t\ " "length" ");"
.SH "DESCRIPTION"
.PP
\fBsd_journal_query_unique()\fR
queries the journal for all unique values the specified field can take\&. It takes two arguments: the journal to query and the field name to look for\&. Well\-known field names are listed on
\fBsystemd.journal-fields\fR(7)\&. Field names must be specified without a trailing \*(Aq=\*(Aq\&. After this function has been executed successfully the field values may be queried using
\fBsd_journal_enumerate_unique()\fR\&. Invoking this call a second time will change the field name being queried and reset the enumeration index to the first field value that matches\&.
.PP
\fBsd_journal_enumerate_unique()\fR
may be used to iterate through all data fields which match the previously selected field name as set with
\fBsd_journal_query_unique()\fR\&. On each invocation the next field data matching the field name is returned\&. The order of the returned data fields is not defined\&. It takes three arguments: the journal context object, plus a pair of pointers to pointer/size variables where the data object and its size shall be stored in\&. The returned data is in a read\-only memory map and is only valid until the next invocation of
\fBsd_journal_enumerate_unique()\fR\&. Note that the data returned will be prefixed with the field name and \*(Aq=\*(Aq\&. Note that this call is subject to the data field size threshold as controlled by
\fBsd_journal_set_data_threshold()\fR\&.
.PP
\fBsd_journal_restart_unique()\fR
resets the data enumeration index to the beginning of the list\&. The next invocation of
\fBsd_journal_enumerate_unique()\fR
will return the first field data matching the field name again\&.
.PP
Note that the
\fBSD_JOURNAL_FOREACH_UNIQUE()\fR
macro may be used as a handy wrapper around
\fBsd_journal_restart_unique()\fR
and
\fBsd_journal_enumerate_unique()\fR\&.
.PP
Note that these functions currently are not influenced by matches set with
\fBsd_journal_add_match()\fR
but this might change in a later version of this software\&.
.SH "RETURN VALUE"
.PP
\fBsd_journal_query_unique()\fR
returns 0 on success or a negative errno\-style error code\&.
\fBsd_journal_enumerate_unique()\fR
returns a positive integer if the next field data has been read, 0 when no more fields are known, or a negative errno\-style error code\&.
\fBsd_journal_restart_unique()\fR
returns nothing\&.
.SH "NOTES"
.PP
The
\fBsd_journal_query_unique()\fR,
\fBsd_journal_enumerate_unique()\fR
and
\fBsd_journal_restart_unique()\fR
interfaces are available as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "EXAMPLES"
.PP
Use the
\fBSD_JOURNAL_FOREACH_UNIQUE\fR
macro to iterate through all values a field of the journal can take\&. The following example lists all unit names referenced in the journal:
.sp
.if n \{\
.RS 4
.\}
.nf
#include <stdio\&.h>
#include <string\&.h>
#include <systemd/sd\-journal\&.h>

int main(int argc, char *argv[]) {
  sd_journal *j;
  const void *d;
  size_t l;
  int r;

  r = sd_journal_open(&j, SD_JOURNAL_LOCAL_ONLY);
  if (r < 0) {
    fprintf(stderr, "Failed to open journal: %s\en", strerror(\-r));
    return 1;
  }
  r = sd_journal_query_unique(j, "_SYSTEMD_UNIT");
  if (r < 0) {
    fprintf(stderr, "Failed to query journal: %s\en", strerror(\-r));
    return 1;
  }
  SD_JOURNAL_FOREACH_UNIQUE(j, d, l)
    printf("%\&.*s\en", (int) l, (const char*) d);
  sd_journal_close(j);
  return 0;
}
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd.journal-fields\fR(7),
\fBsd-journal\fR(3),
\fBsd_journal_open\fR(3),
\fBsd_journal_get_data\fR(3),
\fBsd_journal_add_match\fR(3)
