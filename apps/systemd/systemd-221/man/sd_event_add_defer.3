'\" t
.TH "SD_EVENT_ADD_DEFER" "3" "" "systemd 221" "sd_event_add_defer"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_event_add_defer, sd_event_add_post, sd_event_add_exit \- Add static event sources to an event loop
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-bus\&.h>
.fi
.ft
.HP \w'int\ sd_event_add_defer('u
.BI "int sd_event_add_defer(sd_event\ *" "event" ", sd_event_source\ **" "source" ", sd_event_handler_t\ " "handler" ", void\ *" "userdata" ");"
.HP \w'int\ sd_event_add_post('u
.BI "int sd_event_add_post(sd_event\ *" "event" ", sd_event_source\ **" "source" ", sd_event_handler_t\ " "handler" ", void\ *" "userdata" ");"
.HP \w'int\ sd_event_add_exit('u
.BI "int sd_event_add_exit(sd_event\ *" "event" ", sd_event_source\ **" "source" ", sd_event_handler_t\ " "handler" ", void\ *" "userdata" ");"
.HP \w'typedef\ int\ (*sd_event_handler_t)('u
.BI "typedef int (*sd_event_handler_t)(sd_event_source\ *" "s" ", void\ *" "userdata" ");"
.SH "DESCRIPTION"
.PP
Those three functions add new event sources to an event loop object\&. The event loop is specified in
\fIevent\fR, the event source is returned in the
\fIsource\fR
parameter\&. The event sources are enabled statically and will "fire" when the event loop is run and the conditions described below are met\&. The handler function will be passed the
\fIuserdata\fR
pointer, which may be chosen freely by the caller\&.
.PP
\fBsd_event_add_defer()\fR
adds a new event source that will "fire" the next time the event loop is run\&. By default, the handler will be called once (\fBSD_EVENT_ONESHOT\fR)\&.
.PP
\fBsd_event_add_post()\fR
adds a new event source that will "fire" if any event handlers are invoked whenever the event loop is run\&. By default, the source is enabled permanently (\fBSD_EVENT_ON\fR)\&.
.PP
\fBsd_event_add_exit()\fR
adds a new event source that will "fire" when the event loop is terminated with
\fBsd_event_exit()\fR\&.
.PP
The
\fBsd_event_source_set_enabled\fR(3)
function may be used to enable the event source permanently (\fBSD_EVENT_ON\fR) or to make it fire just once (\fBSD_EVENT_ONESHOT\fR)\&. If the handler function returns a negative error code, it will be disabled after the invocation, even if
\fBSD_EVENT_ON\fR
mode is set\&.
.SH "RETURN VALUE"
.PP
On success, this functions return 0 or a positive integer\&. On failure, they return a negative errno\-style error code\&.
.SH "ERRORS"
.PP
Returned errors may indicate the following problems:
.PP
\fB\-ENOMEM\fR
.RS 4
Not enough memory to allocate an object\&.
.RE
.PP
\fB\-EINVAL\fR
.RS 4
An invalid argument has been passed\&.
.RE
.PP
\fB\-ESTALE\fR
.RS 4
The event loop is already terminated\&.
.RE
.PP
\fB\-ECHILD\fR
.RS 4
The event loop has been created in a different process\&.
.RE
.SH "NOTES"
.PP
Functions described here are available as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-event\fR(3),
\fBsd_event_new\fR(3),
\fBsd_event_add_time\fR(3),
\fBsd_event_add_signal\fR(3),
\fBsd_event_add_child\fR(3),
\fBsd_event_source_set_enabled\fR(3)
