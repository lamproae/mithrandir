'\" t
.TH "SD_EVENT_ADD_CHILD" "3" "" "systemd 221" "sd_event_add_child"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_event_add_child, sd_event_source_get_child_pid \- Add a child state change event source to an event loop
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-bus\&.h>
.fi
.ft
.HP \w'int\ sd_event_add_child('u
.BI "int sd_event_add_child(sd_event\ *" "event" ", sd_event_source\ **" "source" ", pid_t\ " "pid" ", int\ " "options" ", sd_event_child_handler_t\ " "handler" ", void\ *" "userdata" ");"
.HP \w'typedef\ int\ (*sd_event_child_handler_t)('u
.BI "typedef int (*sd_event_child_handler_t)(sd_event_source\ *" "s" ", const\ siginfo_t\ *" "si" ", void\ *" "userdata" ");"
.HP \w'int\ sd_event_source_get_child_pid('u
.BI "int sd_event_source_get_child_pid(sd_event_source\ *" "source" ", pid_t\ *" "pid" ");"
.SH "DESCRIPTION"
.PP
\fBsd_event_add_child()\fR
adds a new child state change event source to an event loop object\&. The event loop is specified in
\fIevent\fR, the event source is returned in the
\fIsource\fR
parameter\&. The
\fIpid\fR
parameter specifies the process to watch\&. The
\fIhandler\fR
must reference a function to call when the process changes state\&. The handler function will be passed the
\fIuserdata\fR
pointer, which may be chosen freely by the caller\&. The handler also receives a pointer to a
const siginfo_t
structure containing the information about the event\&. The
\fIoptions\fR
parameter determines which state changes will be watched for\&. It must contain an OR\-ed mask of
\fBWEXITED\fR
(watch for the child terminating),
\fBWSTOPPED\fR
(watch for the child being stopped by a signal), and
\fBWCONTINUED\fR
(watch for the child being resumed by a signal)\&. See
\fBwaitid\fR(2)
for further information\&.
.PP
Only a single handler may be installed for a specific child\&. The handler is enabled for a single event (\fBSD_EVENT_ONESHOT\fR), but this may be changed with
\fBsd_event_source_set_enabled\fR(3)\&. If the handler function returns a negative error code, it will be disabled after the invocation, even if
\fBSD_EVENT_ON\fR
mode is set\&.
.PP
\fBsd_event_source_get_child_pid()\fR
retrieves the configured
\fIpid\fR
of a child state change event source created previously with
\fBsd_event_add_child()\fR\&. It takes the event source object as the
\fIsource\fR
parameter and a pointer to
\fBpid_t\fR
to return the result in\&.
.SH "RETURN VALUE"
.PP
On success, these functions return 0 or a positive integer\&. On failure, they return a negative errno\-style error code\&.
.SH "ERRORS"
.PP
Returned errors may indicate the following problems:
.PP
\fB\-ENOMEM\fR
.RS 4
Not enough memory to allocate an object\&.
.RE
.PP
\fB\-EINVAL\fR
.RS 4
An invalid argument has been passed\&. This includes specifying an empty mask in
\fIoptions\fR
or a mask which contains values different than a combination of
\fBWEXITED\fR,
\fBWSTOPPED\fR, and
\fBWCONTINUED\fR\&.
.RE
.PP
\fB\-EBUSY\fR
.RS 4
An handler is already installed for this child\&.
.RE
.PP
\fB\-ESTALE\fR
.RS 4
The event loop is already terminated\&.
.RE
.PP
\fB\-ECHILD\fR
.RS 4
The event loop has been created in a different process\&.
.RE
.SH "NOTES"
.PP
\fBsd_event_add_child()\fR
and the other functions described here are available as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-event\fR(3),
\fBsd_event_new\fR(3),
\fBsd_event_add_time\fR(3),
\fBsd_event_add_signal\fR(3),
\fBsd_event_add_defer\fR(3),
\fBsd_event_source_set_enabled\fR(3)
