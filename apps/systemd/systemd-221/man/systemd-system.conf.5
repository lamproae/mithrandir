'\" t
.TH "SYSTEMD\-SYSTEM\&.CONF" "5" "" "systemd 221" "systemd-system.conf"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-system.conf, system.conf.d, systemd-user.conf, user.conf.d \- System and session service manager configuration files
.SH "SYNOPSIS"
.PP
/etc/systemd/system\&.conf
.PP
/etc/systemd/system\&.conf\&.d/*\&.conf
.PP
/run/systemd/system\&.conf\&.d/*\&.conf
.PP
/usr/lib/systemd/system\&.conf\&.d/*\&.conf
.PP
/etc/systemd/user\&.conf
.PP
/etc/systemd/user\&.conf\&.d/*\&.conf
.PP
/run/systemd/user\&.conf\&.d/*\&.conf
.PP
/usr/lib/systemd/user\&.conf\&.d/*\&.conf
.SH "DESCRIPTION"
.PP
When run as a system instance, systemd interprets the configuration file
system\&.conf
and the files in
system\&.conf\&.d
directories; when run as a user instance, systemd interprets the configuration file
user\&.conf
and the files in
user\&.conf\&.d
directories\&. These configuration files contain a few settings controlling basic manager operations\&.
.SH "CONFIGURATION DIRECTORIES AND PRECEDENCE"
.PP
Default configuration is defined during compilation, so a configuration file is only needed when it is necessary to deviate from those defaults\&. By default the configuration file in
/etc/systemd/
contains commented out entries showing the defaults as a guide to the administrator\&. This file can be edited to create local overrides\&.
.PP
When packages need to customize the configuration, they can install configuration snippets in
/usr/lib/systemd/*\&.conf\&.d/\&. Files in
/etc/
are reserved for the local administrator, who may use this logic to override the configuration files installed by vendor packages\&. The main configuration file is read before any of the configuration directories, and has the lowest precedence; entries in a file in any configuration directory override entries in the single configuration file\&. Files in the
*\&.conf\&.d/
configuration subdirectories are sorted by their filename in lexicographic order, regardless of which of the subdirectories they reside in\&. If multiple files specify the same option, the entry in the file with the lexicographically latest name takes precedence\&. It is recommended to prefix all filenames in those subdirectories with a two\-digit number and a dash, to simplify the ordering of the files\&.
.PP
To disable a configuration file supplied by the vendor, the recommended way is to place a symlink to
/dev/null
in the configuration directory in
/etc/, with the same filename as the vendor configuration file\&.
.SH "OPTIONS"
.PP
All options are configured in the
"[Manager]"
section:
.PP
\fILogLevel=\fR, \fILogTarget=\fR, \fILogColor=\fR, \fILogLocation=\fR, \fIDumpCore=yes\fR, \fICrashShell=no\fR, \fIShowStatus=yes\fR, \fICrashChVT=1\fR, \fIDefaultStandardOutput=journal\fR, \fIDefaultStandardError=inherit\fR
.RS 4
Configures various parameters of basic manager operation\&. These options may be overridden by the respective command line arguments\&. See
\fBsystemd\fR(1)
for details about these command line arguments\&.
.RE
.PP
\fICPUAffinity=\fR
.RS 4
Configures the initial CPU affinity for the init process\&. Takes a space\-separated list of CPU indices\&.
.RE
.PP
\fIJoinControllers=cpu,cpuacct net_cls,netprio\fR
.RS 4
Configures controllers that shall be mounted in a single hierarchy\&. By default, systemd will mount all controllers which are enabled in the kernel in individual hierarchies, with the exception of those listed in this setting\&. Takes a space\-separated list of comma\-separated controller names, in order to allow multiple joined hierarchies\&. Defaults to \*(Aqcpu,cpuacct\*(Aq\&. Pass an empty string to ensure that systemd mounts all controllers in separate hierarchies\&.
.sp
Note that this option is only applied once, at very early boot\&. If you use an initial RAM disk (initrd) that uses systemd, it might hence be necessary to rebuild the initrd if this option is changed, and make sure the new configuration file is included in it\&. Otherwise, the initrd might mount the controller hierarchies in a different configuration than intended, and the main system cannot remount them anymore\&.
.RE
.PP
\fIRuntimeWatchdogSec=\fR, \fIShutdownWatchdogSec=\fR
.RS 4
Configure the hardware watchdog at runtime and at reboot\&. Takes a timeout value in seconds (or in other time units if suffixed with
"ms",
"min",
"h",
"d",
"w")\&. If
\fIRuntimeWatchdogSec=\fR
is set to a non\-zero value, the watchdog hardware (/dev/watchdog) will be programmed to automatically reboot the system if it is not contacted within the specified timeout interval\&. The system manager will ensure to contact it at least once in half the specified timeout interval\&. This feature requires a hardware watchdog device to be present, as it is commonly the case in embedded and server systems\&. Not all hardware watchdogs allow configuration of the reboot timeout, in which case the closest available timeout is picked\&.
\fIShutdownWatchdogSec=\fR
may be used to configure the hardware watchdog when the system is asked to reboot\&. It works as a safety net to ensure that the reboot takes place even if a clean reboot attempt times out\&. By default
\fIRuntimeWatchdogSec=\fR
defaults to 0 (off), and
\fIShutdownWatchdogSec=\fR
to 10min\&. These settings have no effect if a hardware watchdog is not available\&.
.RE
.PP
\fICapabilityBoundingSet=\fR
.RS 4
Controls which capabilities to include in the capability bounding set for PID 1 and its children\&. See
\fBcapabilities\fR(7)
for details\&. Takes a whitespace\-separated list of capability names as read by
\fBcap_from_name\fR(3)\&. Capabilities listed will be included in the bounding set, all others are removed\&. If the list of capabilities is prefixed with ~, all but the listed capabilities will be included, the effect of the assignment inverted\&. Note that this option also affects the respective capabilities in the effective, permitted and inheritable capability sets\&. The capability bounding set may also be individually configured for units using the
\fICapabilityBoundingSet=\fR
directive for units, but note that capabilities dropped for PID 1 cannot be regained in individual units, they are lost for good\&.
.RE
.PP
\fISystemCallArchitectures=\fR
.RS 4
Takes a space\-separated list of architecture identifiers\&. Selects from which architectures system calls may be invoked on this system\&. This may be used as an effective way to disable invocation of non\-native binaries system\-wide, for example to prohibit execution of 32\-bit x86 binaries on 64\-bit x86\-64 systems\&. This option operates system\-wide, and acts similar to the
\fISystemCallArchitectures=\fR
setting of unit files, see
\fBsystemd.exec\fR(5)
for details\&. This setting defaults to the empty list, in which case no filtering of system calls based on architecture is applied\&. Known architecture identifiers are
"x86",
"x86\-64",
"x32",
"arm"
and the special identifier
"native"\&. The latter implicitly maps to the native architecture of the system (or more specifically, the architecture the system manager was compiled for)\&. Set this setting to
"native"
to prohibit execution of any non\-native binaries\&. When a binary executes a system call of an architecture that is not listed in this setting, it will be immediately terminated with the SIGSYS signal\&.
.RE
.PP
\fITimerSlackNSec=\fR
.RS 4
Sets the timer slack in nanoseconds for PID 1, which is inherited by all executed processes, unless overridden individually, for example with the
\fITimerSlackNSec=\fR
setting in service units (for details see
\fBsystemd.exec\fR(5))\&. The timer slack controls the accuracy of wake\-ups triggered by system timers\&. See
\fBprctl\fR(2)
for more information\&. Note that in contrast to most other time span definitions this parameter takes an integer value in nano\-seconds if no unit is specified\&. The usual time units are understood too\&.
.RE
.PP
\fIDefaultTimerAccuracySec=\fR
.RS 4
Sets the default accuracy of timer units\&. This controls the global default for the
\fIAccuracySec=\fR
setting of timer units, see
\fBsystemd.timer\fR(5)
for details\&.
\fIAccuracySec=\fR
set in individual units override the global default for the specific unit\&. Defaults to 1min\&. Note that the accuracy of timer units is also affected by the configured timer slack for PID 1, see
\fITimerSlackNSec=\fR
above\&.
.RE
.PP
\fIDefaultTimeoutStartSec=\fR, \fIDefaultTimeoutStopSec=\fR, \fIDefaultRestartSec=\fR
.RS 4
Configures the default timeouts for starting and stopping of units, as well as the default time to sleep between automatic restarts of units, as configured per\-unit in
\fITimeoutStartSec=\fR,
\fITimeoutStopSec=\fR
and
\fIRestartSec=\fR
(for services, see
\fBsystemd.service\fR(5)
for details on the per\-unit settings)\&. For non\-service units,
\fIDefaultTimeoutStartSec=\fR
sets the default
\fITimeoutSec=\fR
value\&.
\fIDefaultTimeoutStartSec=\fR
and
\fIDefaultTimeoutStopSec=\fR
default to 90s\&.
\fIDefaultRestartSec=\fR
defaults to 100ms\&.
.RE
.PP
\fIDefaultStartLimitInterval=\fR, \fIDefaultStartLimitBurst=\fR
.RS 4
Configure the default unit start rate limiting, as configured per\-service by
\fIStartLimitInterval=\fR
and
\fIStartLimitBurst=\fR\&. See
\fBsystemd.service\fR(5)
for details on the per\-service settings\&.
\fIDefaultStartLimitInterval=\fR
defaults to 10s\&.
\fIDefaultStartLimitBurst=\fR
defaults to 5\&.
.RE
.PP
\fIDefaultEnvironment=\fR
.RS 4
Sets manager environment variables passed to all executed processes\&. Takes a space\-separated list of variable assignments\&. See
\fBenviron\fR(7)
for details about environment variables\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
DefaultEnvironment="VAR1=word1 word2" VAR2=word3 "VAR3=word 5 6"
.fi
.if n \{\
.RE
.\}
.sp
Sets three variables
"VAR1",
"VAR2",
"VAR3"\&.
.RE
.PP
\fIDefaultCPUAccounting=\fR, \fIDefaultBlockIOAccounting=\fR, \fIDefaultMemoryAccounting=\fR
.RS 4
Configure the default resource accounting settings, as configured per\-unit by
\fICPUAccounting=\fR,
\fIBlockIOAccounting=\fR
and
\fIMemoryAccounting=\fR\&. See
\fBsystemd.resource-control\fR(5)
for details on the per\-unit settings\&.
.RE
.PP
\fIDefaultLimitCPU=\fR, \fIDefaultLimitFSIZE=\fR, \fIDefaultLimitDATA=\fR, \fIDefaultLimitSTACK=\fR, \fIDefaultLimitCORE=\fR, \fIDefaultLimitRSS=\fR, \fIDefaultLimitNOFILE=\fR, \fIDefaultLimitAS=\fR, \fIDefaultLimitNPROC=\fR, \fIDefaultLimitMEMLOCK=\fR, \fIDefaultLimitLOCKS=\fR, \fIDefaultLimitSIGPENDING=\fR, \fIDefaultLimitMSGQUEUE=\fR, \fIDefaultLimitNICE=\fR, \fIDefaultLimitRTPRIO=\fR, \fIDefaultLimitRTTIME=\fR
.RS 4
These settings control various default resource limits for units\&. See
\fBsetrlimit\fR(2)
for details\&. Use the string
\fIinfinity\fR
to configure no limit on a specific resource\&. These settings may be overridden in individual units using the corresponding LimitXXX= directives\&. Note that these resource limits are only defaults for units, they are not applied to PID 1 itself\&.
.RE
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd.directives\fR(7),
\fBsystemd.exec\fR(5),
\fBsystemd.service\fR(5),
\fBenviron\fR(7),
\fBcapabilities\fR(7)
